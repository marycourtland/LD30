// Generated by CoffeeScript 1.7.1
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

bz.OutputDial = (function(_super) {
  __extends(OutputDial, _super);

  function OutputDial(game, params) {
    OutputDial.__super__.constructor.apply(this, arguments);
    params || (params = {});
    this.pos = params.pos || xy(100, 100);
    this.zero_angle = radians(params.zero_angle || 180);
    this.max_angle = radians(params.max_angle || 90);
    this.dir = params.dir === 'ccw' ? -1 : 1;
    this.arm1 = rth(params.radius || 100, this.zero_angle);
    this.arm2 = rth(params.radius || 100, this.zero_angle + this.dir * this.max_angle);
    this.label = params.label || "";
    this.graphics.width = 10;
    this.graphics.color = 'silver';
    this.graphics.pointer_width = 10;
    this.graphics.pointer_color = 'black';
    this.graphics.indicator_pos = add(this.pos, params.indicator_pos || xy(-this.arm1.r / 2, 25));
    this.graphics.label_pos = add(this.pos, params.label_pos || xy(-this.arm1.r / 2, 50));
    this.scale = {
      min: params.min || 0,
      max: params.max || 1000
    };
    this.value = params.value || 0;
    this.draw_params = {};
    this.recalculate = function() {
      var fraction;
      fraction = (this.value - this.scale.min) / (this.scale.max - this.scale.min);
      this.draw_params.endpoint = this.endpoint();
      this.draw_params.pointer = add(this.pos, rotate(this.arm1, this.max_angle * fraction));
      this.draw_params.center_offset = xy(-this.graphics.width / 4, -this.graphics.width / 4);
      this.draw_params.pos0 = add(this.pos, this.draw_params.center_offset);
      this.draw_params.pos1 = add(this.draw_params.pos0, this.arm1);
      return this.draw_params.pos2 = add(this.draw_params.pos0, this.arm2);
    };
    this.on('draw', function() {
      draw.arc(this.ctx, this.pos, 0.9 * this.arm1.r, this.zero_angle, this.zero_angle + this.max_angle, {
        linewidth: this.graphics.width,
        stroke: this.graphics.color,
        fill: 'transparent'
      });
      draw.line(this.ctx, this.draw_params.pos0, this.draw_params.pos1, {
        linewidth: this.graphics.width / 2,
        stroke: this.graphics.color
      });
      draw.line(this.ctx, this.draw_params.pos0, this.draw_params.pos2, {
        linewidth: this.graphics.width / 2,
        stroke: this.graphics.color
      });
      draw.line(this.ctx, this.draw_params.pos0, this.draw_params.pointer, {
        linewidth: this.graphics.pointer_width,
        stroke: this.graphics.pointer_color,
        linecap: 'round'
      });
      draw.text(this.ctx, this.value.toString(), this.graphics.indicator_pos, 'centered');
      return draw.text(this.ctx, this.label, this.graphics.label_pos, 'centered');
    });
    this.set = function(value) {
      this.value = value;
      return this.recalculate();
    };
    this.endpoint = function() {
      return add(this.pos, this.arm2);
    };
    this.recalculate();
  }

  return OutputDial;

})(GameObject);
